// Code generated by xgen. DO NOT EDIT.

// #[macro_use]
// extern crate serde_derive;
// extern crate serde;
// extern crate serde_xml_rs;
//
// use serde_xml_rs::from_reader;


use serde::{Deserialize, Serialize};

// AssociationModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AssociationModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "numberOfTransactions")]
	pub number_of_transactions: Option<i32>,
	#[serde(rename = "maxNumberOfItemsPerTA")]
	pub max_number_of_items_per_ta: Option<i32>,
	#[serde(rename = "avgNumberOfItemsPerTA")]
	pub avg_number_of_items_per_ta: Option<f64>,
	#[serde(rename = "minimumSupport")]
	pub minimum_support: Option<f64>,
	#[serde(rename = "minimumConfidence")]
	pub minimum_confidence: Option<f64>,
	#[serde(rename = "lengthLimit")]
	pub length_limit: Option<i32>,
	#[serde(rename = "numberOfItems")]
	pub number_of_items: Option<i32>,
	#[serde(rename = "numberOfItemsets")]
	pub number_of_itemsets: Option<i32>,
	#[serde(rename = "numberOfRules")]
	pub number_of_rules: Option<i32>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "Item")]
	pub item: Vec<Item>,
	#[serde(rename = "Itemset")]
	pub itemset: Vec<Itemset>,
	#[serde(rename = "AssociationRule")]
	pub association_rule: Vec<AssociationRule>,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// Item ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Item {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "category")]
	pub category: Option<String>,
	#[serde(rename = "mappedValue")]
	pub mapped_value: Option<String>,
	#[serde(rename = "weight")]
	pub weight: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Itemset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Itemset {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "support")]
	pub support: Option<f64>,
	#[serde(rename = "numberOfItems")]
	pub number_of_items: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ItemRef")]
	pub item_ref: Vec<ItemRef>,
}


// ItemRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ItemRef {
	#[serde(rename = "itemRef")]
	pub item_ref: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// AssociationRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AssociationRule {
	#[serde(rename = "antecedent")]
	pub antecedent: Option<String>,
	#[serde(rename = "consequent")]
	pub consequent: Option<String>,
	#[serde(rename = "support")]
	pub support: Option<f64>,
	#[serde(rename = "confidence")]
	pub confidence: Option<f64>,
	#[serde(rename = "lift")]
	pub lift: Option<f64>,
	#[serde(rename = "leverage")]
	pub leverage: Option<f64>,
	#[serde(rename = "affinity")]
	pub affinity: Option<f64>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BaselineModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BaselineModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "TestDistributions")]
	pub test_distributions: TestDistributions,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// TestDistributions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TestDistributions {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "testStatistic")]
	pub test_statistic: Option<String>,
	#[serde(rename = "resetValue")]
	pub reset_value: Option<f64>,
	#[serde(rename = "windowSize")]
	pub window_size: Option<i32>,
	#[serde(rename = "weightField")]
	pub weight_field: Option<String>,
	#[serde(rename = "normalizationScheme")]
	pub normalization_scheme: Option<String>,
	#[serde(rename = "Baseline")]
	pub baseline: Baseline,
	#[serde(rename = "Alternate")]
	pub alternate: Alternate,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BASELINETESTSTATISTIC ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BASELINETESTSTATISTIC {
	#[serde(rename = "BASELINE-TEST-STATISTIC")]
	pub baselineteststatistic: Option<String>,
}


// Baseline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Baseline {
	#[serde(rename = "CONTINUOUS-DISTRIBUTION-TYPES")]
	pub continuousdistributiontypes: CONTINUOUSDISTRIBUTIONTYPES,
	#[serde(rename = "DISCRETE-DISTRIBUTION-TYPES")]
	pub discretedistributiontypes: DISCRETEDISTRIBUTIONTYPES,
}


// Alternate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Alternate {
	#[serde(rename = "CONTINUOUS-DISTRIBUTION-TYPES")]
	pub continuousdistributiontypes: CONTINUOUSDISTRIBUTIONTYPES,
}


// CONTINUOUSDISTRIBUTIONTYPES ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CONTINUOUSDISTRIBUTIONTYPES {
	#[serde(rename = "AnyDistribution")]
	pub any_distribution: AnyDistribution,
	#[serde(rename = "GaussianDistribution")]
	pub gaussian_distribution: GaussianDistribution,
	#[serde(rename = "PoissonDistribution")]
	pub poisson_distribution: PoissonDistribution,
	#[serde(rename = "UniformDistribution")]
	pub uniform_distribution: UniformDistribution,
	#[serde(rename = "Extension")]
	pub extension: Extension,
}


// AnyDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AnyDistribution {
	#[serde(rename = "mean")]
	pub mean: Option<f64>,
	#[serde(rename = "variance")]
	pub variance: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// GaussianDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GaussianDistribution {
	#[serde(rename = "mean")]
	pub mean: Option<f64>,
	#[serde(rename = "variance")]
	pub variance: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PoissonDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PoissonDistribution {
	#[serde(rename = "mean")]
	pub mean: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// UniformDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UniformDistribution {
	#[serde(rename = "lower")]
	pub lower: Option<f64>,
	#[serde(rename = "upper")]
	pub upper: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// DISCRETEDISTRIBUTIONTYPES ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DISCRETEDISTRIBUTIONTYPES {
	#[serde(rename = "CountTable")]
	pub count_table: COUNTTABLETYPE,
	#[serde(rename = "NormalizedCountTable")]
	pub normalized_count_table: COUNTTABLETYPE,
	#[serde(rename = "FieldRef")]
	pub field_ref: FieldRef,
}


// count_table ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct count_table {
	#[serde(rename = "CountTable")]
	pub count_table: COUNTTABLETYPE,
}


// normalized_count_table ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct normalized_count_table {
	#[serde(rename = "NormalizedCountTable")]
	pub normalized_count_table: COUNTTABLETYPE,
}


// COUNTTABLETYPE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct COUNTTABLETYPE {
	#[serde(rename = "sample")]
	pub sample: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldValue")]
	pub field_value: Vec<FieldValue>,
	#[serde(rename = "FieldValueCount")]
	pub field_value_count: Vec<FieldValueCount>,
}


// FieldValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FieldValue {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "value")]
	pub value: char,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldValue")]
	pub field_value: Vec<FieldValue>,
	#[serde(rename = "FieldValueCount")]
	pub field_value_count: Vec<FieldValueCount>,
}


// FieldValueCount ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FieldValueCount {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "value")]
	pub value: char,
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BayesianNetworkModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BayesianNetworkModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "BayesianNetworkNodes")]
	pub bayesian_network_nodes: BayesianNetworkNodes,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// BayesianNetworkNodes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BayesianNetworkNodes {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DiscreteNode")]
	pub discrete_node: Vec<DiscreteNode>,
	#[serde(rename = "ContinuousNode")]
	pub continuous_node: Vec<ContinuousNode>,
}


// DiscreteNode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DiscreteNode {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DerivedField")]
	pub derived_field: Vec<DerivedField>,
	#[serde(rename = "DiscreteConditionalProbability")]
	pub discrete_conditional_probability: Vec<DiscreteConditionalProbability>,
	#[serde(rename = "ValueProbability")]
	pub value_probability: Vec<ValueProbability>,
}


// ContinuousNode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContinuousNode {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DerivedField")]
	pub derived_field: Vec<DerivedField>,
	#[serde(rename = "ContinuousConditionalProbability")]
	pub continuous_conditional_probability: Vec<ContinuousConditionalProbability>,
	#[serde(rename = "ContinuousDistribution")]
	pub continuous_distribution: Vec<ContinuousDistribution>,
}


// DiscreteConditionalProbability ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DiscreteConditionalProbability {
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ParentValue")]
	pub parent_value: Vec<ParentValue>,
	#[serde(rename = "ValueProbability")]
	pub value_probability: Vec<ValueProbability>,
}


// ParentValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ParentValue {
	#[serde(rename = "parent")]
	pub parent: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ValueProbability ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ValueProbability {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "probability")]
	pub probability: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ContinuousConditionalProbability ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContinuousConditionalProbability {
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ParentValue")]
	pub parent_value: Vec<ParentValue>,
	#[serde(rename = "ContinuousDistribution")]
	pub continuous_distribution: Vec<ContinuousDistribution>,
}


// ContinuousDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContinuousDistribution {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TriangularDistributionForBN")]
	pub triangular_distribution_for_bn: TriangularDistributionForBN,
	#[serde(rename = "NormalDistributionForBN")]
	pub normal_distribution_for_bn: NormalDistributionForBN,
	#[serde(rename = "LognormalDistributionForBN")]
	pub lognormal_distribution_for_bn: LognormalDistributionForBN,
	#[serde(rename = "UniformDistributionForBN")]
	pub uniform_distribution_for_bn: UniformDistributionForBN,
}


// TriangularDistributionForBN ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TriangularDistributionForBN {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Mean")]
	pub mean: Mean,
	#[serde(rename = "Lower")]
	pub lower: Lower,
	#[serde(rename = "Upper")]
	pub upper: Upper,
}


// NormalDistributionForBN ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NormalDistributionForBN {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Mean")]
	pub mean: Mean,
	#[serde(rename = "Variance")]
	pub variance: Variance,
}


// LognormalDistributionForBN ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LognormalDistributionForBN {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Mean")]
	pub mean: Mean,
	#[serde(rename = "Variance")]
	pub variance: Variance,
}


// UniformDistributionForBN ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UniformDistributionForBN {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Lower")]
	pub lower: Lower,
	#[serde(rename = "Upper")]
	pub upper: Upper,
}


// Mean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Mean {
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Lower ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Lower {
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Upper ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Upper {
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Variance ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Variance {
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ClusteringModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ClusteringModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "modelClass")]
	pub model_class: Option<String>,
	#[serde(rename = "numberOfClusters")]
	pub number_of_clusters: Option<i32>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "ComparisonMeasure")]
	pub comparison_measure: Option<String>,
	#[serde(rename = "ClusteringField")]
	pub clustering_field: Vec<String>,
	#[serde(rename = "MissingValueWeights")]
	pub missing_value_weights: MissingValueWeights,
	#[serde(rename = "Cluster")]
	pub cluster: Vec<Cluster>,
	#[serde(rename = "ClusteringModel")]
	pub clustering_model: Option<String>,
}


// MissingValueWeights ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MissingValueWeights {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Cluster ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Cluster {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "size")]
	pub size: Option<u32>,
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "KohonenMap")]
	pub kohonen_map: KohonenMap,
	#[serde(rename = "Partition")]
	pub partition: Partition,
	#[serde(rename = "Covariances")]
	pub covariances: Covariances,
}


// KohonenMap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct KohonenMap {
	#[serde(rename = "coord1")]
	pub coord1: Option<f64>,
	#[serde(rename = "coord2")]
	pub coord2: Option<f64>,
	#[serde(rename = "coord3")]
	pub coord3: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Covariances ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Covariances {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// ClusteringField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ClusteringField {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "isCenterField")]
	pub is_center_field: Option<String>,
	#[serde(rename = "fieldWeight")]
	pub field_weight: Option<f64>,
	#[serde(rename = "similarityScale")]
	pub similarity_scale: Option<f64>,
	#[serde(rename = "compareFunction")]
	pub compare_function: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ClusteringField")]
	pub clustering_field: Option<String>,
}


// Comparisons ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Comparisons {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// COMPAREFUNCTION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct COMPAREFUNCTION {
	#[serde(rename = "COMPARE-FUNCTION")]
	pub comparefunction: Option<String>,
}


// ComparisonMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ComparisonMeasure {
	#[serde(rename = "kind")]
	pub kind: Option<String>,
	#[serde(rename = "compareFunction")]
	pub compare_function: Option<String>,
	#[serde(rename = "minimum")]
	pub minimum: Option<f64>,
	#[serde(rename = "maximum")]
	pub maximum: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "euclidean")]
	pub euclidean: Euclidean,
	#[serde(rename = "squaredEuclidean")]
	pub squared_euclidean: SquaredEuclidean,
	#[serde(rename = "chebychev")]
	pub chebychev: Chebychev,
	#[serde(rename = "cityBlock")]
	pub city_block: CityBlock,
	#[serde(rename = "minkowski")]
	pub minkowski: Minkowski,
	#[serde(rename = "simpleMatching")]
	pub simple_matching: SimpleMatching,
	#[serde(rename = "jaccard")]
	pub jaccard: Jaccard,
	#[serde(rename = "tanimoto")]
	pub tanimoto: Tanimoto,
	#[serde(rename = "ComparisonMeasure")]
	pub comparison_measure: Option<String>,
}


// Euclidean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Euclidean {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// SquaredEuclidean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SquaredEuclidean {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// CityBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CityBlock {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Chebychev ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Chebychev {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Minkowski ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Minkowski {
	#[serde(rename = "p-parameter")]
	pub pparameter: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// SimpleMatching ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SimpleMatching {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Jaccard ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Jaccard {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Tanimoto ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Tanimoto {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BinarySimilarity ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BinarySimilarity {
	#[serde(rename = "c00-parameter")]
	pub c00parameter: Option<f64>,
	#[serde(rename = "c01-parameter")]
	pub c01parameter: Option<f64>,
	#[serde(rename = "c10-parameter")]
	pub c10parameter: Option<f64>,
	#[serde(rename = "c11-parameter")]
	pub c11parameter: Option<f64>,
	#[serde(rename = "d00-parameter")]
	pub d00parameter: Option<f64>,
	#[serde(rename = "d01-parameter")]
	pub d01parameter: Option<f64>,
	#[serde(rename = "d10-parameter")]
	pub d10parameter: Option<f64>,
	#[serde(rename = "d11-parameter")]
	pub d11parameter: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// DataDictionary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DataDictionary {
	#[serde(rename = "numberOfFields")]
	pub number_of_fields: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DataField")]
	pub data_field: Vec<String>,
	#[serde(rename = "Taxonomy")]
	pub taxonomy: Vec<Taxonomy>,
}


// DataField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DataField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "taxonomy")]
	pub taxonomy: Option<String>,
	#[serde(rename = "isCyclic")]
	pub is_cyclic: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Interval")]
	pub interval: Vec<String>,
	#[serde(rename = "DataField")]
	pub data_field: Option<String>,
}


// OPTYPE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OPTYPE {
	#[serde(rename = "OPTYPE")]
	pub optype: Option<String>,
}


// DATATYPE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DATATYPE {
	#[serde(rename = "DATATYPE")]
	pub datatype: Option<String>,
}


// Value ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Value {
	#[serde(rename = "value")]
	pub value: Option<String>,

	#[serde(rename = "displayValue")]
	pub display_value: Option<String>,

	#[serde(rename = "property")]
	pub property: Property,

	#[serde(rename = "Extension", default)]
	pub extensions: Vec<Extension>,
}
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum Property {
	#[serde(rename = "valid")]
	Valid,
	#[serde(rename = "invalid")]
	Invalid,
	#[serde(rename = "missing")]
	Missing,
}


// Interval ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Interval {
	#[serde(rename = "closure")]
	pub closure: Option<String>,
	#[serde(rename = "leftMargin")]
	pub left_margin: Option<f64>,
	#[serde(rename = "rightMargin")]
	pub right_margin: Option<f64>,
	#[serde(rename = "Interval")]
	pub interval: Option<String>,
}


// DefineFunction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DefineFunction {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ParameterField")]
	pub parameter_field: Vec<ParameterField>,
}


// ParameterField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ParameterField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
}
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum InvalidValueTreatmentMethod {
	#[serde(rename = "returnInvalid")]
	ReturnInvalid,

	#[serde(rename = "asIs")]
	AsIs,

	#[serde(rename = "asMissing")]
	AsMissing,

	#[serde(rename = "asValue")]
	AsValue,
}

// Representation of the FIELD-USAGE-TYPE XML simpleType
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum FieldUsageType {
	#[serde(rename = "active")]
	Active,

	#[serde(rename = "predicted")]
	Predicted,

	#[serde(rename = "target")]
	Target,

	#[serde(rename = "supplementary")]
	Supplementary,

	#[serde(rename = "group")]
	Group,

	#[serde(rename = "order")]
	Order,

	#[serde(rename = "frequencyWeight")]
	FrequencyWeight,

	#[serde(rename = "analysisWeight")]
	AnalysisWeight,
}

// Representation of the OUTLIER-TREATMENT-METHOD XML simpleType
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum OutlierTreatmentMethod {
	#[serde(rename = "asIs")]
	AsIs,

	#[serde(rename = "asMissingValues")]
	AsMissingValues,

	#[serde(rename = "asExtremeValues")]
	AsExtremeValues,
}

// Representation of the MISSING-VALUE-TREATMENT-METHOD XML simpleType
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum MissingValueTreatmentMethod {
	#[serde(rename = "asIs")]
	AsIs,

	#[serde(rename = "asMean")]
	AsMean,

	#[serde(rename = "asMode")]
	AsMode,

	#[serde(rename = "asMedian")]
	AsMedian,

	#[serde(rename = "asValue")]
	AsValue,

	#[serde(rename = "returnInvalid")]
	ReturnInvalid,
}

// Apply ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Apply {
	#[serde(rename = "function")]
	pub function: Option<String>,
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<String>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<String>,
	#[serde(rename = "invalidValueTreatment")]
	pub invalid_value_treatment: Option<InvalidValueTreatmentMethod>,
	#[serde(rename = "EXPRESSION")]
	pub expression: Vec<EXPRESSION>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum MultipleModelMethod {
	#[serde(rename = "majorityVote")]
	MajorityVote,

	#[serde(rename = "weightedMajorityVote")]
	WeightedMajorityVote,

	#[serde(rename = "average")]
	Average,

	#[serde(rename = "weightedAverage")]
	WeightedAverage,

	#[serde(rename = "median")]
	Median,

	#[serde(rename = "weightedMedian")]
	WeightedMedian,

	#[serde(rename = "max")]
	Max,

	#[serde(rename = "sum")]
	Sum,

	#[serde(rename = "weightedSum")]
	WeightedSum,

	#[serde(rename = "selectFirst")]
	SelectFirst,

	#[serde(rename = "selectAll")]
	SelectAll,

	#[serde(rename = "modelChain")]
	ModelChain,
}

// GaussianProcessModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GaussianProcessModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "optimizer")]
	pub optimizer: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "RadialBasisKernel")]
	pub radial_basis_kernel: RadialBasisKernel,
	#[serde(rename = "ARDSquaredExponentialKernel")]
	pub ard_squared_exponential_kernel: ARDSquaredExponentialKernel,
	#[serde(rename = "AbsoluteExponentialKernel")]
	pub absolute_exponential_kernel: AbsoluteExponentialKernel,
	#[serde(rename = "GeneralizedExponentialKernel")]
	pub generalized_exponential_kernel: GeneralizedExponentialKernel,
	#[serde(rename = "TrainingInstances")]
	pub training_instances: TrainingInstances,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// RadialBasisKernel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RadialBasisKernel {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "noiseVariance")]
	pub noise_variance: Option<f64>,
	#[serde(rename = "lambda")]
	pub lambda: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ARDSquaredExponentialKernel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ARDSquaredExponentialKernel {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "noiseVariance")]
	pub noise_variance: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Lambda")]
	pub lambda: Vec<Lambda>,
}


// AbsoluteExponentialKernel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AbsoluteExponentialKernel {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "noiseVariance")]
	pub noise_variance: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Lambda")]
	pub lambda: Vec<Lambda>,
}


// GeneralizedExponentialKernel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GeneralizedExponentialKernel {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "noiseVariance")]
	pub noise_variance: Option<f64>,
	#[serde(rename = "degree")]
	pub degree: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Lambda")]
	pub lambda: Vec<Lambda>,
}


// Lambda ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Lambda {
	#[serde(rename = "REAL-ARRAY")]
	pub realarray: REALARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// GeneralRegressionModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GeneralRegressionModel {
	#[serde(rename = "targetVariableName")]
	pub target_variable_name: Option<String>,
	#[serde(rename = "modelType")]
	pub model_type: Option<String>,
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "targetReferenceCategory")]
	pub target_reference_category: Option<String>,
	#[serde(rename = "cumulativeLink")]
	pub cumulative_link: Option<String>,
	#[serde(rename = "linkFunction")]
	pub link_function: Option<String>,
	#[serde(rename = "linkParameter")]
	pub link_parameter: Option<f64>,
	#[serde(rename = "trialsVariable")]
	pub trials_variable: Option<String>,
	#[serde(rename = "trialsValue")]
	pub trials_value: Option<i32>,
	#[serde(rename = "distribution")]
	pub distribution: Option<String>,
	#[serde(rename = "distParameter")]
	pub dist_parameter: Option<f64>,
	#[serde(rename = "offsetVariable")]
	pub offset_variable: Option<String>,
	#[serde(rename = "offsetValue")]
	pub offset_value: Option<f64>,
	#[serde(rename = "modelDF")]
	pub model_df: Option<f64>,
	#[serde(rename = "endTimeVariable")]
	pub end_time_variable: Option<String>,
	#[serde(rename = "startTimeVariable")]
	pub start_time_variable: Option<String>,
	#[serde(rename = "subjectIDVariable")]
	pub subject_id_variable: Option<String>,
	#[serde(rename = "statusVariable")]
	pub status_variable: Option<String>,
	#[serde(rename = "baselineStrataVariable")]
	pub baseline_strata_variable: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Option<Vec<Extension>>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: Option<MiningSchema>,
	#[serde(rename = "Output")]
	pub output: Option<Output>,
	#[serde(rename = "ModelStats")]
	pub model_stats: Option<ModelStats>,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: Option<ModelExplanation>,
	#[serde(rename = "Targets")]
	pub targets: Option<Targets>,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: Option<LocalTransformations>,
	#[serde(rename = "ParameterList")]
	pub parameter_list: Option<ParameterList>,
	#[serde(rename = "FactorList")]
	pub factor_list: Option<Option<FactorList>>,
	#[serde(rename = "CovariateList")]
	pub covariate_list: Option<CovariateList>,
	#[serde(rename = "PPMatrix")]
	pub pp_matrix: Option<PPMatrix>,
	#[serde(rename = "PCovMatrix")]
	pub p_cov_matrix: Option<String>,
	#[serde(rename = "ParamMatrix")]
	pub param_matrix: Option<ParamMatrix>,
	#[serde(rename = "EventValues")]
	pub event_values: Option<EventValues>,
	#[serde(rename = "BaseCumHazardTables")]
	pub base_cum_hazard_tables: Option<BaseCumHazardTables>,
	#[serde(rename = "GeneralRegressionModel")]
	pub general_regression_model: Option<String>,
}




///////////// ParameterList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ParameterList {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Parameter")]
	pub parameter: Vec<Parameter>,
}


// Parameter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Parameter {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "label")]
	pub label: Option<String>,
	#[serde(rename = "referencePoint")]
	pub reference_point: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// FactorList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FactorList {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Predictor")]
	pub predictor: Vec<Predictor>,
}


// CovariateList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CovariateList {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Predictor")]
	pub predictor: Vec<Predictor>,
}


// Predictor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Predictor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "contrastMatrixType")]
	pub contrast_matrix_type: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Categories")]
	pub categories: Categories,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// Categories ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Categories {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Category")]
	pub category: Vec<Category>,
}


// Category ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Category {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PPMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PPMatrix {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "PPCell")]
	pub pp_cell: Vec<PPCell>,
}


// PPCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PPCell {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "predictorName")]
	pub predictor_name: Option<String>,
	#[serde(rename = "parameterName")]
	pub parameter_name: Option<String>,
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PCovMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PCovMatrix {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "PCovMatrix")]
	pub p_cov_matrix: Option<String>,
}


// PCovCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PCovCell {
	#[serde(rename = "pRow")]
	pub p_row: Option<String>,
	#[serde(rename = "pCol")]
	pub p_col: Option<String>,
	#[serde(rename = "tRow")]
	pub t_row: Option<String>,
	#[serde(rename = "tCol")]
	pub t_col: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<f64>,
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ParamMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ParamMatrix {
	#[serde(rename = "Extension")]
	pub extension: Option<Vec<Extension>>,
	#[serde(rename = "PCell")]
	pub p_cell: Option<Vec<PCell>>,
}


// PCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PCell {
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "parameterName")]
	pub parameter_name: Option<String>,
	#[serde(rename = "beta")]
	pub beta: Option<f64>,
	#[serde(rename = "df")]
	pub df: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Option<Vec<Extension>>,
}


// BaseCumHazardTables ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BaseCumHazardTables {
	#[serde(rename = "maxTime")]
	pub max_time: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "BaselineStratum")]
	pub baseline_stratum: Vec<BaselineStratum>,
	#[serde(rename = "BaselineCell")]
	pub baseline_cell: Vec<BaselineCell>,
}


// BaselineStratum ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BaselineStratum {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "label")]
	pub label: Option<String>,
	#[serde(rename = "maxTime")]
	pub max_time: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "BaselineCell")]
	pub baseline_cell: Vec<BaselineCell>,
}


// BaselineCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BaselineCell {
	#[serde(rename = "time")]
	pub time: Option<f64>,
	#[serde(rename = "cumHazard")]
	pub cum_hazard: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// EventValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EventValues {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Value")]
	pub value: Vec<String>,
	#[serde(rename = "Interval")]
	pub interval: Vec<String>,
}


// CUMULATIVELINKFUNCTION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CUMULATIVELINKFUNCTION {
	#[serde(rename = "CUMULATIVE-LINK-FUNCTION")]
	pub cumulativelinkfunction: Option<String>,
}


// LINKFUNCTION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LINKFUNCTION {
	#[serde(rename = "LINK-FUNCTION")]
	pub linkfunction: Option<String>,
}


// PMML ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PMML {
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "MODEL-ELEMENT")]
	pub modelelement: MODELELEMENT,
	#[serde(rename = "Header")]
	pub header: Header,
	#[serde(rename = "MiningBuildTask")]
	pub mining_build_task: MiningBuildTask,
	#[serde(rename = "DataDictionary")]
	pub data_dictionary: DataDictionary,
	#[serde(rename = "TransformationDictionary")]
	pub transformation_dictionary: TransformationDictionary,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// MODELELEMENT ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MODELELEMENT {
	#[serde(rename = "AssociationModel")]
	pub association_model: AssociationModel,
	#[serde(rename = "BayesianNetworkModel")]
	pub bayesian_network_model: BayesianNetworkModel,
	#[serde(rename = "BaselineModel")]
	pub baseline_model: BaselineModel,
	#[serde(rename = "ClusteringModel")]
	pub clustering_model: Option<String>,
	#[serde(rename = "GaussianProcessModel")]
	pub gaussian_process_model: GaussianProcessModel,
	#[serde(rename = "GeneralRegressionModel")]
	pub general_regression_model: Option<String>,
	#[serde(rename = "MiningModel")]
	pub mining_model: MiningModel,
	#[serde(rename = "NaiveBayesModel")]
	pub naive_bayes_model: NaiveBayesModel,
	#[serde(rename = "NearestNeighborModel")]
	pub nearest_neighbor_model: NearestNeighborModel,
	#[serde(rename = "NeuralNetwork")]
	pub neural_network: NeuralNetwork,
	#[serde(rename = "RegressionModel")]
	pub regression_model: Option<String>,
	#[serde(rename = "RuleSetModel")]
	pub rule_set_model: RuleSetModel,
	#[serde(rename = "SequenceModel")]
	pub sequence_model: SequenceModel,
	#[serde(rename = "Scorecard")]
	pub scorecard: Option<String>,
	#[serde(rename = "SupportVectorMachineModel")]
	pub support_vector_machine_model: SupportVectorMachineModel,
	#[serde(rename = "TextModel")]
	pub text_model: TextModel,
	#[serde(rename = "TimeSeriesModel")]
	pub time_series_model: TimeSeriesModel,
	#[serde(rename = "TreeModel")]
	pub tree_model: Option<String>,
}


// MiningBuildTask ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MiningBuildTask {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// MININGFUNCTION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MININGFUNCTION {
	#[serde(rename = "MINING-FUNCTION")]
	pub miningfunction: Option<String>,
}


// Extension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Extension {
	#[serde(rename = "extender")]
	pub extender: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
}


// NUMBER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NUMBER {
	#[serde(rename = "NUMBER")]
	pub number: Option<f64>,
}


// INTNUMBER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct INTNUMBER {
	#[serde(rename = "INT-NUMBER")]
	pub intnumber: Option<i32>,
}


// REALNUMBER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct REALNUMBER {
	#[serde(rename = "REAL-NUMBER")]
	pub realnumber: Option<f64>,
}


// PROBNUMBER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PROBNUMBER {
	#[serde(rename = "PROB-NUMBER")]
	pub probnumber: Option<f64>,
}


// PERCENTAGENUMBER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PERCENTAGENUMBER {
	#[serde(rename = "PERCENTAGE-NUMBER")]
	pub percentagenumber: Option<f64>,
}


// FIELDNAME ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FIELDNAME {
	#[serde(rename = "FIELD-NAME")]
	pub fieldname: Option<String>,
}




// array ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct array {
	#[serde(rename = "Array")]
	pub array: ArrayType,
}


// NUMARRAY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NUMARRAY {
	#[serde(rename = "Array")]
	pub array: ArrayType,
}


// INTARRAY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct INTARRAY {
	#[serde(rename = "Array")]
	pub array: ArrayType,
}


// REALARRAY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct REALARRAY {
	#[serde(rename = "Array")]
	pub array: ArrayType,
}


// STRINGARRAY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRINGARRAY {
	#[serde(rename = "Array")]
	pub array: ArrayType,
}


// INTSparseArray ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct INTSparseArray {
	#[serde(rename = "n")]
	pub n: Option<i32>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<i32>,
	#[serde(rename = "Indices")]
	pub indices: Indices,
	#[serde(rename = "INT-Entries")]
	pub int_entries: INTEntries,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Indices {
	// Using Vec<i32> to represent a list of xs:int
	pub indices: Vec<i32>,
}

// Representation of the INT-NUMBER XML simpleType
type IntNumber = i64;

// Representation of the ArrayType's 'type' attribute as an enum
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum ArrayTypeEnum {
	#[serde(rename = "int")]
	Int,

	#[serde(rename = "real")]
	Real,

	#[serde(rename = "string")]
	String,
}

// Representation of the ArrayType XML complexType
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ArrayType {
	// Using Option for optional attributes
	#[serde(rename = "n")]
	pub n: Option<IntNumber>,

	#[serde(rename = "type")]
	pub array_type: ArrayTypeEnum,
}

// Representation of the REAL-ARRAY XML group
// Assuming Array in XML maps to ArrayType in Rust
#[derive(Debug, Deserialize, Serialize, PartialEq)]
#[serde(tag = "REAL-ARRAY")]
pub enum RealArray {
	#[serde(rename = "Array")]
	Array(ArrayType),
}




// REALSparseArray ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct REALSparseArray {
	#[serde(rename = "n")]
	pub n: Option<i32>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<f64>,
	#[serde(rename = "Indices")]
	pub indices: Indices,
	#[serde(rename = "REAL-Entries")]
	pub real_entries: Option<String>,
}



// indices ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct indices {
	#[serde(rename = "Indices")]
	pub indices: Indices,
}


// int_entries ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct int_entries {
	#[serde(rename = "INT-Entries")]
	pub int_entries: INTEntries,
}


// Representation of the INT-Entries XML element
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct INTEntries {
	// Using Vec<i32> to represent a list of xs:int
	pub int_entries: Vec<i32>,
}

// Representation of the REAL-Entries XML element
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RealEntries {
	// Using Vec<f64> to represent a list of xs:double
	pub real_entries: Vec<f64>,
}

// real_entries ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct real_entries {
	#[serde(rename = "REAL-Entries")]
	pub real_entries: Option<String>,
}


// Matrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Matrix {
	#[serde(rename = "kind")]
	pub kind: Option<String>,
	#[serde(rename = "nbRows")]
	pub nb_rows: Option<i32>,
	#[serde(rename = "nbCols")]
	pub nb_cols: Option<i32>,
	#[serde(rename = "diagDefault")]
	pub diag_default: Option<f64>,
	#[serde(rename = "offDiagDefault")]
	pub off_diag_default: Option<f64>,
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: Vec<NUMARRAY>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// MatCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MatCell {
	#[serde(rename = "row")]
	pub row: Option<i32>,
	#[serde(rename = "col")]
	pub col: Option<i32>,
	#[serde(rename = "$value")]
	pub value: Option<String>,
}


// Header ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Header {
	#[serde(rename = "copyright")]
	pub copyright: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "modelVersion")]
	pub model_version: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Application")]
	pub application: Application,
	#[serde(rename = "Annotation")]
	pub annotation: Vec<Annotation>,
	#[serde(rename = "Timestamp")]
	pub timestamp: Timestamp,
}


// Application ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Application {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Annotation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Annotation {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Timestamp ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Timestamp {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NearestNeighborModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NearestNeighborModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "numberOfNeighbors")]
	pub number_of_neighbors: Option<i32>,
	#[serde(rename = "continuousScoringMethod")]
	pub continuous_scoring_method: Option<ContScoringMethod>,
	#[serde(rename = "categoricalScoringMethod")]
	pub categorical_scoring_method: Option<CatScoringMethod>,
	#[serde(rename = "instanceIdVariable")]
	pub instance_id_variable: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "TrainingInstances")]
	pub training_instances: TrainingInstances,
	#[serde(rename = "ComparisonMeasure")]
	pub comparison_measure: Option<String>,
	#[serde(rename = "KNNInputs")]
	pub knn_inputs: KNNInputs,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// TrainingInstances ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TrainingInstances {
	#[serde(rename = "isTransformed")]
	pub is_transformed: Option<bool>,
	#[serde(rename = "recordCount")]
	pub record_count: Option<i32>,
	#[serde(rename = "fieldCount")]
	pub field_count: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "InstanceFields")]
	pub instance_fields: InstanceFields,
	#[serde(rename = "TableLocator")]
	pub table_locator: TableLocator,
	#[serde(rename = "InlineTable")]
	pub inline_table: InlineTable,
}


// InstanceFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct InstanceFields {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "InstanceField")]
	pub instance_field: Vec<InstanceField>,
}


// InstanceField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct InstanceField {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "column")]
	pub column: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// KNNInputs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct KNNInputs {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "KNNInput")]
	pub knn_input: Vec<KNNInput>,
}


// KNNInput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct KNNInput {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "fieldWeight")]
	pub field_weight: Option<f64>,
	#[serde(rename = "compareFunction")]
	pub compare_function: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// MiningSchema ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MiningSchema {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningField")]
	pub mining_field: Vec<MiningField>,
}


// MiningField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MiningField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "usageType")]
	pub usage_type: Option<FieldUsageType>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "importance")]
	pub importance: Option<f64>,
	#[serde(rename = "outliers")]
	pub outliers: Option<OutlierTreatmentMethod>,
	#[serde(rename = "lowValue")]
	pub low_value: Option<f64>,
	#[serde(rename = "highValue")]
	pub high_value: Option<f64>,
	#[serde(rename = "missingValueReplacement")]
	pub missing_value_replacement: Option<String>,
	#[serde(rename = "missingValueTreatment")]
	pub missing_value_treatment: Option<MissingValueTreatmentMethod>,
	#[serde(rename = "invalidValueTreatment")]
	pub invalid_value_treatment: Option<InvalidValueTreatmentMethod>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ModelExplanation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModelExplanation {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "PredictiveModelQuality")]
	pub predictive_model_quality: Vec<String>,
	#[serde(rename = "ClusteringModelQuality")]
	pub clustering_model_quality: Vec<ClusteringModelQuality>,
	#[serde(rename = "Correlations")]
	pub correlations: Correlations,
}


// PredictiveModelQuality ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PredictiveModelQuality {
	#[serde(rename = "targetField")]
	pub target_field: Option<String>,
	#[serde(rename = "dataName")]
	pub data_name: Option<String>,
	#[serde(rename = "dataUsage")]
	pub data_usage: Option<String>,
	#[serde(rename = "meanError")]
	pub mean_error: Option<f64>,
	#[serde(rename = "meanAbsoluteError")]
	pub mean_absolute_error: Option<f64>,
	#[serde(rename = "meanSquaredError")]
	pub mean_squared_error: Option<f64>,
	#[serde(rename = "rootMeanSquaredError")]
	pub root_mean_squared_error: Option<f64>,
	#[serde(rename = "r-squared")]
	pub rsquared: Option<f64>,
	#[serde(rename = "adj-r-squared")]
	pub adjrsquared: Option<f64>,
	#[serde(rename = "sumSquaredError")]
	pub sum_squared_error: Option<f64>,
	#[serde(rename = "sumSquaredRegression")]
	pub sum_squared_regression: Option<f64>,
	#[serde(rename = "numOfRecords")]
	pub num_of_records: Option<f64>,
	#[serde(rename = "numOfRecordsWeighted")]
	pub num_of_records_weighted: Option<f64>,
	#[serde(rename = "numOfPredictors")]
	pub num_of_predictors: Option<f64>,
	#[serde(rename = "degreesOfFreedom")]
	pub degrees_of_freedom: Option<f64>,
	#[serde(rename = "fStatistic")]
	pub f_statistic: Option<f64>,
	#[serde(rename = "AIC")]
	pub aic: Option<f64>,
	#[serde(rename = "BIC")]
	pub bic: Option<f64>,
	#[serde(rename = "AICc")]
	pub ai_cc: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ConfusionMatrix")]
	pub confusion_matrix: ConfusionMatrix,
	#[serde(rename = "LiftData")]
	pub lift_data: Vec<LiftData>,
	#[serde(rename = "PredictiveModelQuality")]
	pub predictive_model_quality: Option<String>,
}


// ClusteringModelQuality ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ClusteringModelQuality {
	#[serde(rename = "dataName")]
	pub data_name: Option<String>,
	#[serde(rename = "SSE")]
	pub sse: Option<f64>,
	#[serde(rename = "SSB")]
	pub ssb: Option<f64>,
}


// LiftData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LiftData {
	#[serde(rename = "targetFieldValue")]
	pub target_field_value: Option<String>,
	#[serde(rename = "targetFieldDisplayValue")]
	pub target_field_display_value: Option<String>,
	#[serde(rename = "rankingQuality")]
	pub ranking_quality: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ModelLiftGraph")]
	pub model_lift_graph: ModelLiftGraph,
	#[serde(rename = "OptimumLiftGraph")]
	pub optimum_lift_graph: OptimumLiftGraph,
	#[serde(rename = "RandomLiftGraph")]
	pub random_lift_graph: RandomLiftGraph,
}


// ModelLiftGraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModelLiftGraph {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "LiftGraph")]
	pub lift_graph: LiftGraph,
}


// OptimumLiftGraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OptimumLiftGraph {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "LiftGraph")]
	pub lift_graph: LiftGraph,
}


// RandomLiftGraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RandomLiftGraph {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "LiftGraph")]
	pub lift_graph: LiftGraph,
}


// LiftGraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LiftGraph {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "XCoordinates")]
	pub x_coordinates: XCoordinates,
	#[serde(rename = "YCoordinates")]
	pub y_coordinates: YCoordinates,
	#[serde(rename = "BoundaryValues")]
	pub boundary_values: BoundaryValues,
	#[serde(rename = "BoundaryValueMeans")]
	pub boundary_value_means: BoundaryValueMeans,
}


// XCoordinates ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct XCoordinates {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// YCoordinates ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct YCoordinates {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BoundaryValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BoundaryValues {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// BoundaryValueMeans ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BoundaryValueMeans {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ROC ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ROC {
	#[serde(rename = "positiveTargetFieldValue")]
	pub positive_target_field_value: Option<String>,
	#[serde(rename = "positiveTargetFieldDisplayValue")]
	pub positive_target_field_display_value: Option<String>,
	#[serde(rename = "negativeTargetFieldValue")]
	pub negative_target_field_value: Option<String>,
	#[serde(rename = "negativeTargetFieldDisplayValue")]
	pub negative_target_field_display_value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ROCGraph")]
	pub roc_graph: ROCGraph,
}


// ROCGraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ROCGraph {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "XCoordinates")]
	pub x_coordinates: XCoordinates,
	#[serde(rename = "YCoordinates")]
	pub y_coordinates: YCoordinates,
	#[serde(rename = "BoundaryValues")]
	pub boundary_values: BoundaryValues,
}


// ConfusionMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ConfusionMatrix {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ClassLabels")]
	pub class_labels: ClassLabels,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// ClassLabels ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ClassLabels {
	#[serde(rename = "STRING-ARRAY")]
	pub stringarray: STRINGARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Correlations ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Correlations {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "CorrelationFields")]
	pub correlation_fields: CorrelationFields,
	#[serde(rename = "CorrelationValues")]
	pub correlation_values: CorrelationValues,
	#[serde(rename = "CorrelationMethods")]
	pub correlation_methods: CorrelationMethods,
}


// CorrelationFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CorrelationFields {
	#[serde(rename = "STRING-ARRAY")]
	pub stringarray: STRINGARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// CorrelationValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CorrelationValues {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// CorrelationMethods ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CorrelationMethods {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// ModelVerification ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModelVerification {
	#[serde(rename = "recordCount")]
	pub record_count: Option<i32>,
	#[serde(rename = "fieldCount")]
	pub field_count: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "VerificationFields")]
	pub verification_fields: VerificationFields,
	#[serde(rename = "InlineTable")]
	pub inline_table: InlineTable,
}


// VerificationFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VerificationFields {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "VerificationField")]
	pub verification_field: Vec<VerificationField>,
}


// VerificationField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VerificationField {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "column")]
	pub column: Option<String>,
	#[serde(rename = "precision")]
	pub precision: Option<f64>,
	#[serde(rename = "zeroThreshold")]
	pub zero_threshold: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// MiningModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MiningModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "Regression")]
	pub regression: Vec<Regression>,
	#[serde(rename = "DecisionTree")]
	pub decision_tree: Vec<String>,
	#[serde(rename = "Segmentation")]
	pub segmentation: Segmentation,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// Segmentation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Segmentation {
	#[serde(rename = "multipleModelMethod")]
	pub multiple_model_method: MultipleModelMethod,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Segment")]
	pub segment: Vec<Segment>,
}


// Segment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Segment {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "weight")]
	pub weight: Option<f64>,
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "MODEL-ELEMENT")]
	pub modelelement: MODELELEMENT,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// EmbeddedModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EmbeddedModel {
	#[serde(rename = "Extension")]
	pub extension: Extension,
	#[serde(rename = "Regression")]
	pub regression: Regression,
	#[serde(rename = "DecisionTree")]
	pub decision_tree: Option<String>,
}


// ResultField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ResultField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "feature")]
	pub feature: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Regression ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Regression {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "normalizationMethod")]
	pub normalization_method: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "ResultField")]
	pub result_field: Vec<ResultField>,
	#[serde(rename = "RegressionTable")]
	pub regression_table: Vec<RegressionTable>,
}


// DecisionTree ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DecisionTree {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "missingValueStrategy")]
	pub missing_value_strategy: Option<String>,
	#[serde(rename = "missingValuePenalty")]
	pub missing_value_penalty: Option<f64>,
	#[serde(rename = "noTrueChildStrategy")]
	pub no_true_child_strategy: Option<String>,
	#[serde(rename = "splitCharacteristic")]
	pub split_characteristic: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "ResultField")]
	pub result_field: Vec<ResultField>,
	#[serde(rename = "DecisionTree")]
	pub decision_tree: Option<String>,
}


// NaiveBayesModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NaiveBayesModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "BayesInputs")]
	pub bayes_inputs: BayesInputs,
	#[serde(rename = "BayesOutput")]
	pub bayes_output: BayesOutput,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// BayesInputs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BayesInputs {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "BayesInput")]
	pub bayes_input: Vec<BayesInput>,
}


// BayesInput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BayesInput {
	#[serde(rename = "fieldName")]
	pub field_name: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TargetValueStats")]
	pub target_value_stats: TargetValueStats,
	#[serde(rename = "DerivedField")]
	pub derived_field: DerivedField,
	#[serde(rename = "PairCounts")]
	pub pair_counts: Vec<PairCounts>,
}


// BayesOutput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BayesOutput {
	#[serde(rename = "fieldName")]
	pub field_name: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TargetValueCounts")]
	pub target_value_counts: TargetValueCounts,
}


// TargetValueStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TargetValueStats {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TargetValueStat")]
	pub target_value_stat: Vec<TargetValueStat>,
}


// TargetValueStat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TargetValueStat {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "CONTINUOUS-DISTRIBUTION-TYPES")]
	pub continuousdistributiontypes: CONTINUOUSDISTRIBUTIONTYPES,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PairCounts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PairCounts {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TargetValueCounts")]
	pub target_value_counts: TargetValueCounts,
}


// TargetValueCounts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TargetValueCounts {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TargetValueCount")]
	pub target_value_count: Vec<TargetValueCount>,
}


// TargetValueCount ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TargetValueCount {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "count")]
	pub count: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NeuralNetwork ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralNetwork {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "activationFunction")]
	pub activation_function: Option<String>,
	#[serde(rename = "normalizationMethod")]
	pub normalization_method: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "width")]
	pub width: Option<f64>,
	#[serde(rename = "altitude")]
	pub altitude: Option<f64>,
	#[serde(rename = "numberOfLayers")]
	pub number_of_layers: Option<u32>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "NeuralInputs")]
	pub neural_inputs: NeuralInputs,
	#[serde(rename = "NeuralLayer")]
	pub neural_layer: Vec<NeuralLayer>,
	#[serde(rename = "NeuralOutputs")]
	pub neural_outputs: NeuralOutputs,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// NeuralInputs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralInputs {
	#[serde(rename = "numberOfInputs")]
	pub number_of_inputs: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "NeuralInput")]
	pub neural_input: Vec<NeuralInput>,
}


// NeuralLayer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralLayer {
	#[serde(rename = "numberOfNeurons")]
	pub number_of_neurons: Option<u32>,
	#[serde(rename = "activationFunction")]
	pub activation_function: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "width")]
	pub width: Option<f64>,
	#[serde(rename = "altitude")]
	pub altitude: Option<f64>,
	#[serde(rename = "normalizationMethod")]
	pub normalization_method: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Neuron")]
	pub neuron: Vec<Neuron>,
}


// NeuralOutputs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralOutputs {
	#[serde(rename = "numberOfOutputs")]
	pub number_of_outputs: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "NeuralOutput")]
	pub neural_output: Vec<NeuralOutput>,
}


// ACTIVATIONFUNCTION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ACTIVATIONFUNCTION {
	#[serde(rename = "ACTIVATION-FUNCTION")]
	pub activationfunction: Option<String>,
}


// NNNORMALIZATIONMETHOD ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NNNORMALIZATIONMETHOD {
	#[serde(rename = "NN-NORMALIZATION-METHOD")]
	pub nnnormalizationmethod: Option<String>,
}


// NNNEURONID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NNNEURONID {
	#[serde(rename = "NN-NEURON-ID")]
	pub nnneuronid: Option<String>,
}


// NNNEURONIDREF ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NNNEURONIDREF {
	#[serde(rename = "NN-NEURON-IDREF")]
	pub nnneuronidref: Option<String>,
}


// NeuralInput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralInput {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DerivedField")]
	pub derived_field: DerivedField,
}


// Neuron ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Neuron {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "bias")]
	pub bias: Option<f64>,
	#[serde(rename = "width")]
	pub width: Option<f64>,
	#[serde(rename = "altitude")]
	pub altitude: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Con")]
	pub con: Vec<Con>,
}


// Con ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Con {
	#[serde(rename = "from")]
	pub from: Option<String>,
	#[serde(rename = "weight")]
	pub weight: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NeuralOutput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NeuralOutput {
	#[serde(rename = "outputNeuron")]
	pub output_neuron: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DerivedField")]
	pub derived_field: DerivedField,
}


// Output ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Output {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "OutputField")]
	pub output_field: Vec<String>,
}


// OutputField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OutputField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "targetField")]
	pub target_field: Option<String>,
	#[serde(rename = "feature")]
	pub feature: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "ruleFeature")]
	pub rule_feature: Option<String>,
	#[serde(rename = "algorithm")]
	pub algorithm: Option<String>,
	#[serde(rename = "rank")]
	pub rank: Option<i32>,
	#[serde(rename = "rankBasis")]
	pub rank_basis: Option<String>,
	#[serde(rename = "rankOrder")]
	pub rank_order: Option<String>,
	#[serde(rename = "isMultiValued")]
	pub is_multi_valued: Option<char>,
	#[serde(rename = "segmentId")]
	pub segment_id: Option<String>,
	#[serde(rename = "isFinalResult")]
	pub is_final_result: Option<bool>,
	#[serde(rename = "EXPRESSION")]
	pub expression: Vec<EXPRESSION>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "OutputField")]
	pub output_field: Option<String>,
}


// RESULTFEATURE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RESULTFEATURE {
	#[serde(rename = "RESULT-FEATURE")]
	pub resultfeature: Option<String>,
}


// Decisions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Decisions {
	#[serde(rename = "businessProblem")]
	pub business_problem: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Decision")]
	pub decision: Vec<Decision>,
}


// Decision ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Decision {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "displayValue")]
	pub display_value: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// RULEFEATURE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RULEFEATURE {
	#[serde(rename = "RULE-FEATURE")]
	pub rulefeature: Option<String>,
}


// RegressionModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RegressionModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "modelType")]
	pub model_type: Option<String>,
	#[serde(rename = "targetFieldName")]
	pub target_field_name: Option<String>,
	#[serde(rename = "normalizationMethod")]
	pub normalization_method: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "RegressionTable")]
	pub regression_table: Vec<RegressionTable>,
	#[serde(rename = "RegressionModel")]
	pub regression_model: Option<String>,
}


// REGRESSIONNORMALIZATIONMETHOD ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct REGRESSIONNORMALIZATIONMETHOD {
	#[serde(rename = "REGRESSIONNORMALIZATIONMETHOD")]
	pub regressionnormalizationmethod: Option<String>,
}


// RegressionTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RegressionTable {
	#[serde(rename = "intercept")]
	pub intercept: Option<f64>,
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "NumericPredictor")]
	pub numeric_predictor: Vec<NumericPredictor>,
	#[serde(rename = "CategoricalPredictor")]
	pub categorical_predictor: Vec<CategoricalPredictor>,
	#[serde(rename = "PredictorTerm")]
	pub predictor_term: Vec<PredictorTerm>,
}


// NumericPredictor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NumericPredictor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "exponent")]
	pub exponent: Option<i32>,
	#[serde(rename = "coefficient")]
	pub coefficient: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// CategoricalPredictor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CategoricalPredictor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "coefficient")]
	pub coefficient: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PredictorTerm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PredictorTerm {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "coefficient")]
	pub coefficient: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldRef")]
	pub field_ref: Vec<FieldRef>,
}


// RuleSetModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RuleSetModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "RuleSet")]
	pub rule_set: RuleSet,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// RuleSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RuleSet {
	#[serde(rename = "recordCount")]
	pub record_count: Option<f64>,
	#[serde(rename = "nbCorrect")]
	pub nb_correct: Option<f64>,
	#[serde(rename = "defaultScore")]
	pub default_score: Option<String>,
	#[serde(rename = "defaultConfidence")]
	pub default_confidence: Option<f64>,
	#[serde(rename = "Rule")]
	pub rule: Vec<Rule>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "RuleSelectionMethod")]
	pub rule_selection_method: Vec<String>,
	#[serde(rename = "ScoreDistribution")]
	pub score_distribution: Vec<ScoreDistribution>,
}


// RuleSelectionMethod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RuleSelectionMethod {
	#[serde(rename = "criterion")]
	pub criterion: Option<String>,
	#[serde(rename = "RuleSelectionMethod")]
	pub rule_selection_method: Option<String>,
}


// Rule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Rule {
	#[serde(rename = "SimpleRule")]
	pub simple_rule: SimpleRule,
	#[serde(rename = "CompoundRule")]
	pub compound_rule: CompoundRule,
}


// SimpleRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SimpleRule {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "score")]
	pub score: Option<String>,
	#[serde(rename = "recordCount")]
	pub record_count: Option<f64>,
	#[serde(rename = "nbCorrect")]
	pub nb_correct: Option<f64>,
	#[serde(rename = "confidence")]
	pub confidence: Option<f64>,
	#[serde(rename = "weight")]
	pub weight: Option<f64>,
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ScoreDistribution")]
	pub score_distribution: Vec<ScoreDistribution>,
}


// CompoundRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CompoundRule {
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "Rule")]
	pub rule: Vec<Rule>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Scorecard ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Scorecard {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "initialScore")]
	pub initial_score: Option<f64>,
	#[serde(rename = "useReasonCodes")]
	pub use_reason_codes: Option<bool>,
	#[serde(rename = "reasonCodeAlgorithm")]
	pub reason_code_algorithm: Option<String>,
	#[serde(rename = "baselineScore")]
	pub baseline_score: Option<f64>,
	#[serde(rename = "baselineMethod")]
	pub baseline_method: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "Characteristics")]
	pub characteristics: Characteristics,
	#[serde(rename = "Scorecard")]
	pub scorecard: Option<String>,
}


// Characteristics ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Characteristics {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Characteristic")]
	pub characteristic: Vec<Characteristic>,
}


// Characteristic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Characteristic {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "reasonCode")]
	pub reason_code: Option<String>,
	#[serde(rename = "baselineScore")]
	pub baseline_score: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Attribute")]
	pub attribute: Vec<Attribute>,
}


// Attribute ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Attribute {
	#[serde(rename = "reasonCode")]
	pub reason_code: Option<String>,
	#[serde(rename = "partialScore")]
	pub partial_score: Option<f64>,
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ComplexPartialScore")]
	pub complex_partial_score: ComplexPartialScore,
}


// ComplexPartialScore ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ComplexPartialScore {
	#[serde(rename = "EXPRESSION")]
	pub expression: Vec<EXPRESSION>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// SequenceModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SequenceModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "numberOfTransactions")]
	pub number_of_transactions: Option<i32>,
	#[serde(rename = "maxNumberOfItemsPerTransaction")]
	pub max_number_of_items_per_transaction: Option<i32>,
	#[serde(rename = "avgNumberOfItemsPerTransaction")]
	pub avg_number_of_items_per_transaction: Option<f64>,
	#[serde(rename = "numberOfTransactionGroups")]
	pub number_of_transaction_groups: Option<i32>,
	#[serde(rename = "maxNumberOfTAsPerTAGroup")]
	pub max_number_of_t_as_per_ta_group: Option<i32>,
	#[serde(rename = "avgNumberOfTAsPerTAGroup")]
	pub avg_number_of_t_as_per_ta_group: Option<f64>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "Constraints")]
	pub constraints: Constraints,
	#[serde(rename = "Item")]
	pub item: Vec<Item>,
	#[serde(rename = "Itemset")]
	pub itemset: Vec<Itemset>,
	#[serde(rename = "SetPredicate")]
	pub set_predicate: Vec<SetPredicate>,
	#[serde(rename = "Sequence")]
	pub sequence: Vec<Sequence>,
	#[serde(rename = "SequenceRule")]
	pub sequence_rule: Vec<SequenceRule>,
}


// Constraints ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Constraints {
	#[serde(rename = "minimumNumberOfItems")]
	pub minimum_number_of_items: Option<i32>,
	#[serde(rename = "maximumNumberOfItems")]
	pub maximum_number_of_items: Option<i32>,
	#[serde(rename = "minimumNumberOfAntecedentItems")]
	pub minimum_number_of_antecedent_items: Option<i32>,
	#[serde(rename = "maximumNumberOfAntecedentItems")]
	pub maximum_number_of_antecedent_items: Option<i32>,
	#[serde(rename = "minimumNumberOfConsequentItems")]
	pub minimum_number_of_consequent_items: Option<i32>,
	#[serde(rename = "maximumNumberOfConsequentItems")]
	pub maximum_number_of_consequent_items: Option<i32>,
	#[serde(rename = "minimumSupport")]
	pub minimum_support: Option<f64>,
	#[serde(rename = "minimumConfidence")]
	pub minimum_confidence: Option<f64>,
	#[serde(rename = "minimumLift")]
	pub minimum_lift: Option<f64>,
	#[serde(rename = "minimumTotalSequenceTime")]
	pub minimum_total_sequence_time: Option<f64>,
	#[serde(rename = "maximumTotalSequenceTime")]
	pub maximum_total_sequence_time: Option<f64>,
	#[serde(rename = "minimumItemsetSeparationTime")]
	pub minimum_itemset_separation_time: Option<f64>,
	#[serde(rename = "maximumItemsetSeparationTime")]
	pub maximum_itemset_separation_time: Option<f64>,
	#[serde(rename = "minimumAntConsSeparationTime")]
	pub minimum_ant_cons_separation_time: Option<f64>,
	#[serde(rename = "maximumAntConsSeparationTime")]
	pub maximum_ant_cons_separation_time: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ELEMENTID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ELEMENTID {
	#[serde(rename = "ELEMENT-ID")]
	pub elementid: Option<String>,
}


// SetPredicate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SetPredicate {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "operator")]
	pub operator: Option<String>,
	#[serde(rename = "STRING-ARRAY")]
	pub stringarray: STRINGARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// DELIMITER ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DELIMITER {
	#[serde(rename = "DELIMITER")]
	pub delimiter: Option<String>,
}


// GAP ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GAP {
	#[serde(rename = "GAP")]
	pub gap: Option<String>,
}


// Delimiter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Delimiter {
	#[serde(rename = "delimiter")]
	pub delimiter: Option<String>,
	#[serde(rename = "gap")]
	pub gap: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Time ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Time {
	#[serde(rename = "min")]
	pub min: Option<f64>,
	#[serde(rename = "max")]
	pub max: Option<f64>,
	#[serde(rename = "mean")]
	pub mean: Option<f64>,
	#[serde(rename = "standardDeviation")]
	pub standard_deviation: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// FOLLOWSET ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FOLLOWSET {
	#[serde(rename = "Extension")]
	pub extension: Extension,
	#[serde(rename = "Delimiter")]
	pub delimiter: Delimiter,
	#[serde(rename = "Time")]
	pub time: Time,
	#[serde(rename = "SetReference")]
	pub set_reference: SetReference,
}


// Sequence ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Sequence {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "numberOfSets")]
	pub number_of_sets: Option<i32>,
	#[serde(rename = "occurrence")]
	pub occurrence: Option<i32>,
	#[serde(rename = "support")]
	pub support: Option<f64>,
	#[serde(rename = "FOLLOW-SET")]
	pub followset: FOLLOWSET,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "SetReference")]
	pub set_reference: SetReference,
	#[serde(rename = "Time")]
	pub time: Time,
}


// SetReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SetReference {
	#[serde(rename = "setId")]
	pub set_id: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// SequenceRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SequenceRule {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "numberOfSets")]
	pub number_of_sets: Option<i32>,
	#[serde(rename = "occurrence")]
	pub occurrence: Option<i32>,
	#[serde(rename = "support")]
	pub support: Option<f64>,
	#[serde(rename = "confidence")]
	pub confidence: Option<f64>,
	#[serde(rename = "lift")]
	pub lift: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "AntecedentSequence")]
	pub antecedent_sequence: AntecedentSequence,
	#[serde(rename = "Delimiter")]
	pub delimiter: Delimiter,
	#[serde(rename = "Time")]
	pub time: Time,
	#[serde(rename = "ConsequentSequence")]
	pub consequent_sequence: ConsequentSequence,
}


// SEQUENCE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SEQUENCE {
	#[serde(rename = "Extension")]
	pub extension: Extension,
	#[serde(rename = "SequenceReference")]
	pub sequence_reference: SequenceReference,
	#[serde(rename = "Time")]
	pub time: Time,
}


// SequenceReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SequenceReference {
	#[serde(rename = "seqId")]
	pub seq_id: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// AntecedentSequence ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AntecedentSequence {
	#[serde(rename = "SEQUENCE")]
	pub sequence: SEQUENCE,
}


// ConsequentSequence ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ConsequentSequence {
	#[serde(rename = "SEQUENCE")]
	pub sequence: SEQUENCE,
}


// ModelStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModelStats {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "UnivariateStats")]
	pub univariate_stats: Vec<String>,
	#[serde(rename = "MultivariateStats")]
	pub multivariate_stats: Vec<MultivariateStats>,
}


// UnivariateStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UnivariateStats {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "weighted")]
	pub weighted: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Counts")]
	pub counts: Counts,
	#[serde(rename = "NumericInfo")]
	pub numeric_info: NumericInfo,
	#[serde(rename = "DiscrStats")]
	pub discr_stats: DiscrStats,
	#[serde(rename = "ContStats")]
	pub cont_stats: ContStats,
	#[serde(rename = "UnivariateStats")]
	pub univariate_stats: Option<String>,
}


// Counts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Counts {
	#[serde(rename = "totalFreq")]
	pub total_freq: Option<f64>,
	#[serde(rename = "missingFreq")]
	pub missing_freq: Option<f64>,
	#[serde(rename = "invalidFreq")]
	pub invalid_freq: Option<f64>,
	#[serde(rename = "cardinality")]
	pub cardinality: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NumericInfo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NumericInfo {
	#[serde(rename = "minimum")]
	pub minimum: Option<f64>,
	#[serde(rename = "maximum")]
	pub maximum: Option<f64>,
	#[serde(rename = "mean")]
	pub mean: Option<f64>,
	#[serde(rename = "standardDeviation")]
	pub standard_deviation: Option<f64>,
	#[serde(rename = "median")]
	pub median: Option<f64>,
	#[serde(rename = "interQuartileRange")]
	pub inter_quartile_range: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Quantile")]
	pub quantile: Vec<Quantile>,
}


// Quantile ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Quantile {
	#[serde(rename = "quantileLimit")]
	pub quantile_limit: Option<f64>,
	#[serde(rename = "quantileValue")]
	pub quantile_value: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// DiscrStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DiscrStats {
	#[serde(rename = "modalValue")]
	pub modal_value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Array")]
	pub array: Vec<ArrayType>,
}


// ContStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContStats {
	#[serde(rename = "totalValuesSum")]
	pub total_values_sum: Option<f64>,
	#[serde(rename = "totalSquaresSum")]
	pub total_squares_sum: Option<f64>,
	#[serde(rename = "FrequenciesType")]
	pub frequencies_type: FrequenciesType,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Interval")]
	pub interval: Vec<String>,
}


// FrequenciesType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FrequenciesType {
	#[serde(rename = "NUM-ARRAY")]
	pub numarray: NUMARRAY,
}


// MultivariateStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MultivariateStats {
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MultivariateStat")]
	pub multivariate_stat: Vec<MultivariateStat>,
}


// MultivariateStat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MultivariateStat {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "category")]
	pub category: Option<String>,
	#[serde(rename = "exponent")]
	pub exponent: Option<i32>,
	#[serde(rename = "isIntercept")]
	pub is_intercept: Option<bool>,
	#[serde(rename = "importance")]
	pub importance: Option<f64>,
	#[serde(rename = "stdError")]
	pub std_error: Option<f64>,
	#[serde(rename = "tValue")]
	pub t_value: Option<f64>,
	#[serde(rename = "chiSquareValue")]
	pub chi_square_value: Option<f64>,
	#[serde(rename = "fStatistic")]
	pub f_statistic: Option<f64>,
	#[serde(rename = "dF")]
	pub df: Option<f64>,
	#[serde(rename = "pValueAlpha")]
	pub p_value_alpha: Option<f64>,
	#[serde(rename = "pValueInitial")]
	pub p_value_initial: Option<f64>,
	#[serde(rename = "pValueFinal")]
	pub p_value_final: Option<f64>,
	#[serde(rename = "confidenceLevel")]
	pub confidence_level: Option<f64>,
	#[serde(rename = "confidenceLowerBound")]
	pub confidence_lower_bound: Option<f64>,
	#[serde(rename = "confidenceUpperBound")]
	pub confidence_upper_bound: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Anova ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Anova {
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "AnovaRow")]
	pub anova_row: Vec<String>,
}


// AnovaRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AnovaRow {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "sumOfSquares")]
	pub sum_of_squares: Option<f64>,
	#[serde(rename = "degreesOfFreedom")]
	pub degrees_of_freedom: Option<f64>,
	#[serde(rename = "meanOfSquares")]
	pub mean_of_squares: Option<f64>,
	#[serde(rename = "fValue")]
	pub f_value: Option<f64>,
	#[serde(rename = "pValue")]
	pub p_value: Option<f64>,
	#[serde(rename = "AnovaRow")]
	pub anova_row: Option<String>,
}


// Partition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Partition {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "size")]
	pub size: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "PartitionFieldStats")]
	pub partition_field_stats: Vec<String>,
}


// PartitionFieldStats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PartitionFieldStats {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "weighted")]
	pub weighted: Option<String>,
	#[serde(rename = "FrequenciesType")]
	pub frequencies_type: FrequenciesType,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Counts")]
	pub counts: Counts,
	#[serde(rename = "PartitionFieldStats")]
	pub partition_field_stats: Option<String>,
}


// SupportVectorMachineModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SupportVectorMachineModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "svmRepresentation")]
	pub svm_representation: Option<String>,
	#[serde(rename = "classificationMethod")]
	pub classification_method: Option<String>,
	#[serde(rename = "maxWins")]
	pub max_wins: Option<bool>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "LinearKernelType")]
	pub linear_kernel_type: LinearKernelType,
	#[serde(rename = "PolynomialKernelType")]
	pub polynomial_kernel_type: PolynomialKernelType,
	#[serde(rename = "RadialBasisKernelType")]
	pub radial_basis_kernel_type: RadialBasisKernelType,
	#[serde(rename = "SigmoidKernelType")]
	pub sigmoid_kernel_type: SigmoidKernelType,
	#[serde(rename = "VectorDictionary")]
	pub vector_dictionary: VectorDictionary,
	#[serde(rename = "SupportVectorMachine")]
	pub support_vector_machine: Vec<SupportVectorMachine>,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// SVMCLASSIFICATIONMETHOD ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SVMCLASSIFICATIONMETHOD {
	#[serde(rename = "SVM-CLASSIFICATION-METHOD")]
	pub svmclassificationmethod: Option<String>,
}


// SVMREPRESENTATION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SVMREPRESENTATION {
	#[serde(rename = "SVM-REPRESENTATION")]
	pub svmrepresentation: Option<String>,
}


// LinearKernelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LinearKernelType {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// PolynomialKernelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PolynomialKernelType {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "coef0")]
	pub coef0: Option<f64>,
	#[serde(rename = "degree")]
	pub degree: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// RadialBasisKernelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RadialBasisKernelType {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// SigmoidKernelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SigmoidKernelType {
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "coef0")]
	pub coef0: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// VECTORID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VECTORID {
	#[serde(rename = "VECTOR-ID")]
	pub vectorid: Option<String>,
}


// VectorDictionary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VectorDictionary {
	#[serde(rename = "numberOfVectors")]
	pub number_of_vectors: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "VectorFields")]
	pub vector_fields: VectorFields,
	#[serde(rename = "VectorInstance")]
	pub vector_instance: Vec<VectorInstance>,
}


// VectorFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VectorFields {
	#[serde(rename = "numberOfFields")]
	pub number_of_fields: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldRef")]
	pub field_ref: Vec<FieldRef>,
	#[serde(rename = "CategoricalPredictor")]
	pub categorical_predictor: Vec<CategoricalPredictor>,
}


// VectorInstance ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VectorInstance {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "REAL-ARRAY")]
	pub realarray: REALARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "REAL-SparseArray")]
	pub real_sparse_array: REALSparseArray,
}


// SupportVectorMachine ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SupportVectorMachine {
	#[serde(rename = "targetCategory")]
	pub target_category: Option<String>,
	#[serde(rename = "alternateTargetCategory")]
	pub alternate_target_category: Option<String>,
	#[serde(rename = "threshold")]
	pub threshold: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "SupportVectors")]
	pub support_vectors: SupportVectors,
	#[serde(rename = "Coefficients")]
	pub coefficients: Coefficients,
}


// SupportVectors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SupportVectors {
	#[serde(rename = "numberOfSupportVectors")]
	pub number_of_support_vectors: Option<i32>,
	#[serde(rename = "numberOfAttributes")]
	pub number_of_attributes: Option<i32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "SupportVector")]
	pub support_vector: Vec<SupportVector>,
}


// SupportVector ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SupportVector {
	#[serde(rename = "vectorId")]
	pub vector_id: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Coefficients ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Coefficients {
	#[serde(rename = "numberOfCoefficients")]
	pub number_of_coefficients: Option<i32>,
	#[serde(rename = "absoluteValue")]
	pub absolute_value: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Coefficient")]
	pub coefficient: Vec<Coefficient>,
}


// Coefficient ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Coefficient {
	#[serde(rename = "value")]
	pub value: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Targets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Targets {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Target")]
	pub target: Vec<String>,
}


// Target ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Target {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "castInteger")]
	pub cast_integer: Option<String>,
	#[serde(rename = "min")]
	pub min: Option<f64>,
	#[serde(rename = "max")]
	pub max: Option<f64>,
	#[serde(rename = "rescaleConstant")]
	pub rescale_constant: Option<f64>,
	#[serde(rename = "rescaleFactor")]
	pub rescale_factor: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Target")]
	pub target: Option<String>,
}


// TargetValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TargetValue {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "displayValue")]
	pub display_value: Option<String>,
	#[serde(rename = "priorProbability")]
	pub prior_probability: Option<f64>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Partition")]
	pub partition: Partition,
}


// Taxonomy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Taxonomy {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "ChildParent")]
	pub child_parent: Vec<String>,
}


// ChildParent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ChildParent {
	#[serde(rename = "childField")]
	pub child_field: Option<String>,
	#[serde(rename = "parentField")]
	pub parent_field: Option<String>,
	#[serde(rename = "parentLevelField")]
	pub parent_level_field: Option<String>,
	#[serde(rename = "isRecursive")]
	pub is_recursive: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldColumnPair")]
	pub field_column_pair: Vec<FieldColumnPair>,
	#[serde(rename = "TableLocator")]
	pub table_locator: TableLocator,
	#[serde(rename = "ChildParent")]
	pub child_parent: Option<String>,
}


// TableLocator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TableLocator {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// InlineTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct InlineTable {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "row")]
	pub row: Vec<Row>,
}


// Row ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Row {
}


// TextModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "numberOfTerms")]
	pub number_of_terms: Option<i32>,
	#[serde(rename = "numberOfDocuments")]
	pub number_of_documents: Option<i32>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "TextDictionary")]
	pub text_dictionary: TextDictionary,
	#[serde(rename = "TextCorpus")]
	pub text_corpus: TextCorpus,
	#[serde(rename = "DocumentTermMatrix")]
	pub document_term_matrix: DocumentTermMatrix,
	#[serde(rename = "TextModelNormalization")]
	pub text_model_normalization: Option<String>,
	#[serde(rename = "TextModelSimiliarity")]
	pub text_model_similiarity: Option<String>,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}


// TextDictionary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextDictionary {
	#[serde(rename = "STRING-ARRAY")]
	pub stringarray: STRINGARRAY,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Taxonomy")]
	pub taxonomy: Taxonomy,
}


// TextCorpus ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextCorpus {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TextDocument")]
	pub text_document: Vec<TextDocument>,
}


// TextDocument ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextDocument {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "length")]
	pub length: Option<i32>,
	#[serde(rename = "file")]
	pub file: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// DocumentTermMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentTermMatrix {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Matrix")]
	pub matrix: Option<String>,
}


// TextModelNormalization ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextModelNormalization {
	#[serde(rename = "localTermWeights")]
	pub local_term_weights: Option<String>,
	#[serde(rename = "globalTermWeights")]
	pub global_term_weights: Option<String>,
	#[serde(rename = "documentNormalization")]
	pub document_normalization: Option<String>,
	#[serde(rename = "TextModelNormalization")]
	pub text_model_normalization: Option<String>,
}


// TextModelSimiliarity ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextModelSimiliarity {
	#[serde(rename = "similarityType")]
	pub similarity_type: Option<String>,
	#[serde(rename = "TextModelSimiliarity")]
	pub text_model_similiarity: Option<String>,
}


// TimeSeriesModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeSeriesModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "bestFit")]
	pub best_fit: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "TimeSeries")]
	pub time_series: Vec<TimeSeries>,
	#[serde(rename = "SpectralAnalysis")]
	pub spectral_analysis: SpectralAnalysis,
	// #[serde(rename = "ARIMA")]
	// pub arima: ARIMA,
	#[serde(rename = "ExponentialSmoothing")]
	pub exponential_smoothing: Option<String>,
	#[serde(rename = "SeasonalTrendDecomposition")]
	pub seasonal_trend_decomposition: SeasonalTrendDecomposition,
	#[serde(rename = "ModelVerification")]
	pub model_verification: ModelVerification,
}
#[derive(Debug, Deserialize, Serialize, PartialEq)]
#[serde(rename = "median")]
pub struct SeasonalTrendDecomposition {
	pub extensions: Option<Vec<Extension>>,
}
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum ContScoringMethod {
	#[serde(rename = "median")]
	Median,

	#[serde(rename = "average")]
	Average,

	#[serde(rename = "weightedAverage")]
	WeightedAverage,
}
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub enum CatScoringMethod {
	#[serde(rename = "majorityVote")]
	MajorityVote,

	#[serde(rename = "weightedMajorityVote")]
	WeightedMajorityVote,
}


// TIMESERIESALGORITHM ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TIMESERIESALGORITHM {
	#[serde(rename = "TIMESERIES-ALGORITHM")]
	pub timeseriesalgorithm: Option<String>,
}


// TimeSeries ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeSeries {
	#[serde(rename = "usage")]
	pub usage: Option<String>,
	#[serde(rename = "startTime")]
	pub start_time: Option<f64>,
	#[serde(rename = "endTime")]
	pub end_time: Option<f64>,
	#[serde(rename = "interpolationMethod")]
	pub interpolation_method: Option<String>,
	#[serde(rename = "TimeAnchor")]
	pub time_anchor: TimeAnchor,
	#[serde(rename = "TimeValue")]
	pub time_value: Vec<TimeValue>,
}


// TIMESERIESUSAGE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TIMESERIESUSAGE {
	#[serde(rename = "TIMESERIES-USAGE")]
	pub timeseriesusage: Option<String>,
}


// TimeValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeValue {
	#[serde(rename = "index")]
	pub index: Option<i32>,
	#[serde(rename = "time")]
	pub time: Option<f64>,
	#[serde(rename = "value")]
	pub value: Option<f64>,
	#[serde(rename = "standardError")]
	pub standard_error: Option<f64>,
	#[serde(rename = "Timestamp")]
	pub timestamp: Timestamp,
}


// TimeAnchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeAnchor {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "offset")]
	pub offset: Option<i32>,
	#[serde(rename = "stepsize")]
	pub stepsize: Option<i32>,
	#[serde(rename = "displayName")]
	pub display_name: Option<char>,
	#[serde(rename = "TimeCycle")]
	pub time_cycle: Vec<TimeCycle>,
	#[serde(rename = "TimeException")]
	pub time_exception: Vec<TimeException>,
}


// TimeCycle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeCycle {
	#[serde(rename = "length")]
	pub length: Option<i32>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: Option<char>,
	#[serde(rename = "INT-ARRAY")]
	pub intarray: Vec<INTARRAY>,
}


// TIMEANCHOR ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TIMEANCHOR {
	#[serde(rename = "TIME-ANCHOR")]
	pub timeanchor: Option<String>,
}


// VALIDTIMESPEC ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct VALIDTIMESPEC {
	#[serde(rename = "VALID-TIME-SPEC")]
	pub validtimespec: Option<String>,
}


// TimeException ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimeException {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "count")]
	pub count: Option<i32>,
	#[serde(rename = "INT-ARRAY")]
	pub intarray: INTARRAY,
}


// TIMEEXCEPTIONTYPE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TIMEEXCEPTIONTYPE {
	#[serde(rename = "TIME-EXCEPTION-TYPE")]
	pub timeexceptiontype: Option<String>,
}


// INTERPOLATIONMETHOD ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct INTERPOLATIONMETHOD {
	#[serde(rename = "INTERPOLATION-METHOD")]
	pub interpolationmethod: Option<String>,
}


// ExponentialSmoothing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ExponentialSmoothing {
	#[serde(rename = "RMSE")]
	pub rmse: Option<f64>,
	#[serde(rename = "transformation")]
	pub transformation: Option<String>,
	#[serde(rename = "Level")]
	pub level: Level,
	#[serde(rename = "Trend_ExpoSmooth")]
	pub trend_expo_smooth: Option<String>,
	#[serde(rename = "Seasonality_ExpoSmooth")]
	pub seasonality_expo_smooth: Option<String>,
	#[serde(rename = "ExponentialSmoothing")]
	pub exponential_smoothing: Option<String>,
}


// Level ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Level {
	#[serde(rename = "alpha")]
	pub alpha: Option<f64>,
	#[serde(rename = "smoothedValue")]
	pub smoothed_value: Option<f64>,
}


// TrendExpoSmooth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TrendExpoSmooth {
	#[serde(rename = "trend")]
	pub trend: Option<String>,
	#[serde(rename = "gamma")]
	pub gamma: Option<f64>,
	#[serde(rename = "phi")]
	pub phi: Option<f64>,
	#[serde(rename = "smoothedValue")]
	pub smoothed_value: Option<f64>,
	#[serde(rename = "REAL-ARRAY")]
	pub realarray: REALARRAY,
}


// SeasonalityExpoSmooth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SeasonalityExpoSmooth {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "period")]
	pub period: Option<i32>,
	#[serde(rename = "unit")]
	pub unit: Option<String>,
	#[serde(rename = "phase")]
	pub phase: Option<i32>,
	#[serde(rename = "delta")]
	pub delta: Option<f64>,
	#[serde(rename = "REAL-ARRAY")]
	pub realarray: REALARRAY,
}


// spectral_analysis ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct spectral_analysis {
	#[serde(rename = "SpectralAnalysis")]
	pub spectral_analysis: SpectralAnalysis,
}


// arima ...
// #[derive(Debug, Deserialize, Serialize, PartialEq)]
// pub struct arima {
// 	#[serde(rename = "ARIMA")]
// 	pub arima: ARIMA,
// }


// seasonal_trend_decomposition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct seasonal_trend_decomposition {
	#[serde(rename = "SeasonalTrendDecomposition")]
	pub seasonal_trend_decomposition: SeasonalTrendDecomposition,
}


// EXPRESSION ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EXPRESSION {
	#[serde(rename = "Constant")]
	pub constant: Constant,
	#[serde(rename = "FieldRef")]
	pub field_ref: FieldRef,
	#[serde(rename = "NormContinuous")]
	pub norm_continuous: NormContinuous,
	#[serde(rename = "NormDiscrete")]
	pub norm_discrete: NormDiscrete,
	#[serde(rename = "Discretize")]
	pub discretize: Discretize,
	#[serde(rename = "MapValues")]
	pub map_values: MapValues,
	#[serde(rename = "TextIndex")]
	pub text_index: Option<String>,
	#[serde(rename = "Apply")]
	pub apply: Apply,
	#[serde(rename = "Aggregate")]
	pub aggregate: Option<String>,
	#[serde(rename = "Lag")]
	pub lag: Lag,
}


// TransformationDictionary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TransformationDictionary {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DefineFunction")]
	pub define_function: Vec<DefineFunction>,
	#[serde(rename = "DerivedField")]
	pub derived_field: Vec<DerivedField>,
}


// LocalTransformations ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LocalTransformations {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DerivedField")]
	pub derived_field: Vec<DerivedField>,
}


// DerivedField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DerivedField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: Option<String>,
	#[serde(rename = "optype")]
	pub optype: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Value")]
	pub value: Vec<String>,
}


// Constant ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Constant {
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "$value")]
	pub value: Option<String>,
}


// FieldRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FieldRef {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NormContinuous ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NormContinuous {
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<f64>,
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "outliers")]
	pub outliers: Option<OutlierTreatmentMethod>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "LinearNorm")]
	pub linear_norm: Vec<LinearNorm>,
}


// LinearNorm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LinearNorm {
	#[serde(rename = "orig")]
	pub orig: Option<f64>,
	#[serde(rename = "norm")]
	pub norm: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// NormDiscrete ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NormDiscrete {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// Discretize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Discretize {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<String>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "DiscretizeBin")]
	pub discretize_bin: Vec<DiscretizeBin>,
}


// DiscretizeBin ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DiscretizeBin {
	#[serde(rename = "binValue")]
	pub bin_value: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Interval")]
	pub interval: Option<String>,
}


// MapValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MapValues {
	#[serde(rename = "mapMissingTo")]
	pub map_missing_to: Option<String>,
	#[serde(rename = "defaultValue")]
	pub default_value: Option<String>,
	#[serde(rename = "outputColumn")]
	pub output_column: Option<String>,
	#[serde(rename = "dataType")]
	pub data_type: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "FieldColumnPair")]
	pub field_column_pair: Vec<FieldColumnPair>,
	#[serde(rename = "TableLocator")]
	pub table_locator: TableLocator,
	#[serde(rename = "InlineTable")]
	pub inline_table: InlineTable,
}


// FieldColumnPair ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FieldColumnPair {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "column")]
	pub column: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// TextIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextIndex {
	#[serde(rename = "textField")]
	pub text_field: Option<String>,
	#[serde(rename = "localTermWeights")]
	pub local_term_weights: Option<String>,
	#[serde(rename = "isCaseSensitive")]
	pub is_case_sensitive: Option<bool>,
	#[serde(rename = "maxLevenshteinDistance")]
	pub max_levenshtein_distance: Option<i32>,
	#[serde(rename = "countHits")]
	pub count_hits: Option<String>,
	#[serde(rename = "wordSeparatorCharacterRE")]
	pub word_separator_character_re: Option<String>,
	#[serde(rename = "tokenize")]
	pub tokenize: Option<bool>,
	#[serde(rename = "EXPRESSION")]
	pub expression: EXPRESSION,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TextIndex")]
	pub text_index: Option<String>,
}


// TextIndexNormalization ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextIndexNormalization {
	#[serde(rename = "inField")]
	pub in_field: Option<String>,
	#[serde(rename = "outField")]
	pub out_field: Option<String>,
	#[serde(rename = "regexField")]
	pub regex_field: Option<String>,
	#[serde(rename = "recursive")]
	pub recursive: Option<bool>,
	#[serde(rename = "isCaseSensitive")]
	pub is_case_sensitive: Option<bool>,
	#[serde(rename = "maxLevenshteinDistance")]
	pub max_levenshtein_distance: Option<i32>,
	#[serde(rename = "wordSeparatorCharacterRE")]
	pub word_separator_character_re: Option<String>,
	#[serde(rename = "tokenize")]
	pub tokenize: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "TableLocator")]
	pub table_locator: TableLocator,
	#[serde(rename = "InlineTable")]
	pub inline_table: InlineTable,
}


// Aggregate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Aggregate {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "function")]
	pub function: Option<String>,
	#[serde(rename = "groupField")]
	pub group_field: Option<String>,
	#[serde(rename = "sqlWhere")]
	pub sql_where: Option<String>,
	#[serde(rename = "Aggregate")]
	pub aggregate: Option<String>,
}


// Lag ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Lag {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "n")]
	pub n: Option<u32>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "BlockIndicator")]
	pub block_indicator: Vec<BlockIndicator>,
}


// BlockIndicator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BlockIndicator {
	#[serde(rename = "field")]
	pub field: Option<String>,
}


// TreeModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TreeModel {
	#[serde(rename = "modelName")]
	pub model_name: Option<String>,
	#[serde(rename = "functionName")]
	pub function_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "missingValueStrategy")]
	pub missing_value_strategy: Option<String>,
	#[serde(rename = "missingValuePenalty")]
	pub missing_value_penalty: Option<f64>,
	#[serde(rename = "noTrueChildStrategy")]
	pub no_true_child_strategy: Option<String>,
	#[serde(rename = "splitCharacteristic")]
	pub split_characteristic: Option<String>,
	#[serde(rename = "isScorable")]
	pub is_scorable: Option<bool>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "MiningSchema")]
	pub mining_schema: MiningSchema,
	#[serde(rename = "Output")]
	pub output: Output,
	#[serde(rename = "ModelStats")]
	pub model_stats: ModelStats,
	#[serde(rename = "ModelExplanation")]
	pub model_explanation: ModelExplanation,
	#[serde(rename = "Targets")]
	pub targets: Targets,
	#[serde(rename = "LocalTransformations")]
	pub local_transformations: LocalTransformations,
	#[serde(rename = "Node")]
	pub node: Node,
	#[serde(rename = "TreeModel")]
	pub tree_model: Option<String>,
}


// Node ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Node {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "score")]
	pub score: Option<String>,
	#[serde(rename = "recordCount")]
	pub record_count: Option<f64>,
	#[serde(rename = "defaultChild")]
	pub default_child: Option<String>,
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "EmbeddedModel")]
	pub embedded_model: EmbeddedModel,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "Partition")]
	pub partition: Partition,
	#[serde(rename = "ScoreDistribution")]
	pub score_distribution: Vec<ScoreDistribution>,
	#[serde(rename = "Node")]
	pub node: Vec<Node>,
}


// PREDICATE ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PREDICATE {
	#[serde(rename = "SimplePredicate")]
	pub simple_predicate: Option<String>,
	#[serde(rename = "CompoundPredicate")]
	pub compound_predicate: Option<String>,
	#[serde(rename = "SimpleSetPredicate")]
	pub simple_set_predicate: Option<String>,
	#[serde(rename = "True")]
	pub true_attr: True,
	#[serde(rename = "False")]
	pub false_attr: False,
}


// SimplePredicate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SimplePredicate {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "operator")]
	pub operator: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "SimplePredicate")]
	pub simple_predicate: Option<String>,
}


// CompoundPredicate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CompoundPredicate {
	#[serde(rename = "booleanOperator")]
	pub boolean_operator: Option<String>,
	#[serde(rename = "PREDICATE")]
	pub predicate: PREDICATE,
	#[serde(rename = "CompoundPredicate")]
	pub compound_predicate: Option<String>,
}


// SimpleSetPredicate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SimpleSetPredicate {
	#[serde(rename = "field")]
	pub field: Option<String>,
	#[serde(rename = "booleanOperator")]
	pub boolean_operator: Option<String>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
	#[serde(rename = "SimpleSetPredicate")]
	pub simple_set_predicate: Option<String>,
}


// True ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct True {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// False ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct False {
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// ScoreDistribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ScoreDistribution {
	#[serde(rename = "value")]
	pub value: Option<String>,
	#[serde(rename = "recordCount")]
	pub record_count: Option<f64>,
	#[serde(rename = "confidence")]
	pub confidence: Option<f64>,
	#[serde(rename = "probability")]
	pub probability: Option<f64>,
	#[serde(rename = "Extension")]
	pub extension: Vec<Extension>,
}


// MISSINGVALUESTRATEGY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MISSINGVALUESTRATEGY {
	#[serde(rename = "MISSING-VALUE-STRATEGY")]
	pub missingvaluestrategy: Option<String>,
}


// NOTRUECHILDSTRATEGY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct NOTRUECHILDSTRATEGY {
	#[serde(rename = "NO-TRUE-CHILD-STRATEGY")]
	pub notruechildstrategy: Option<String>,
}



#[derive(Debug, Deserialize, Serialize, PartialEq)]
#[serde(untagged)]
pub enum MatrixElement {
	NumArray(/*Your NumArray struct here*/),
	MatCell(/*Your MatCell struct here*/),
}




#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SpectralAnalysis {
	// Using Option<Vec> to represent 0 to unbounded occurrences of Extension
	pub extensions: Option<Vec<Extension>>,
}